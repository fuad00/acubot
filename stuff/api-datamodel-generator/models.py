# generated by datamodel-codegen:
#   filename:  Acunetix-API-Documentation.json
#   timestamp: Easter egg here! 

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, conint, constr


class AcceptedSource(Enum):
    ignore_entry = 'ignore_entry'
    un_ignore_entry = 'un_ignore_entry'
    blacklist_ip = 'blacklist_ip'
    un_blacklist_ip = 'un_blacklist_ip'
    blacklist_second_level_domain = 'blacklist_second_level_domain'
    un_blacklist_second_level_domain = 'un_blacklist_second_level_domain'
    blacklist_top_level_domain = 'blacklist_top_level_domain'
    un_blacklist_top_level_domain = 'un_blacklist_top_level_domain'
    blacklist_organization = 'blacklist_organization'
    un_blacklist_organization = 'un_blacklist_organization'


class ReportTemplate(BaseModel):
    name: Optional[str] = Field(None, description='Report Template name')
    group: Optional[str] = None
    template_id: UUID = Field(..., description='Report Template unique identifier')
    accepted_sources: Optional[List[AcceptedSource]] = None


class Check(BaseModel):
    __root__: constr(min_length=1, max_length=128)


class ScanningProfile(BaseModel):
    name: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='Scan Type (Scanning Profile) name'
    )
    profile_id: Optional[UUID] = Field(
        None, description='Scan Type (Scanning Profile) unique identifier'
    )
    sort_order: Optional[conint(ge=1)] = Field(None, description='Sort order value')
    custom: Optional[bool] = Field(
        None,
        description='Describes if the Scan Type (Scanning Profile) is user-editable (read only)',
    )
    checks: List[Check] = Field(
        ...,
        description='Vulnerability test names obtained from /checks.json; array must contain names of checks which are NOT to be performed; if array contains the name of a group of checks, then the entire group of checks will NOT be performed; consider the example ["wvs/Scripts","wvs/httpdata/opensearch-httpdata.js"] -  this will exclude the entire "wvs/Scripts" group of tests, and will also exclude the "wvs/httpdata/opensearch-httpdata.js" specific test.',
        max_items=800,
    )


class PaginationExt(BaseModel):
    count: Optional[int] = Field(
        None, description='The number of elements given "q" (query/query_hash)'
    )
    cursors: Optional[List[str]] = Field(
        None, description='A list of cursor, current and known following cursors'
    )
    cursor_hash: Optional[str] = Field(
        None,
        description='MD5 hash of the cursor, query and sorting generating this query.',
    )
    sort: Optional[str] = None


class ScanAuthorization(BaseModel):
    url: Optional[str] = None
    content: Optional[str] = None


class Type(Enum):
    default = 'default'
    demo = 'demo'
    network = 'network'


class TargetAgents(BaseModel):
    agent_id: UUID = Field(..., description='Agent ID')
    name: Optional[str] = None


class Schedule(BaseModel):
    disable: Optional[bool] = Field(None, description='Schedule is disabled')
    time_sensitive: Optional[bool] = Field(
        None, description='Scan Schedule is time-sensitive'
    )
    history_limit: Optional[conint(ge=0, le=10)] = Field(
        None, description='Number of Scans to retain for a Schedule'
    )
    start_date: Optional[str] = Field(
        None,
        description='The (inclusive) start time of the schedule For a recurring schedule, this is the start time of the first instance. Formatted as described in RFC3339 http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14\n',
    )
    recurrence: Optional[constr(max_length=256)] = Field(
        None,
        description='Recurrence specification as described in RFC5545 (http://tools.ietf.org/html/rfc5545)\n',
    )
    triggerable: Optional[bool] = False


class Status(Enum):
    scheduled = 'scheduled'
    queued = 'queued'
    starting = 'starting'
    processing = 'processing'
    aborting = 'aborting'
    aborted = 'aborted'
    pausing = 'pausing'
    paused = 'paused'
    completed = 'completed'
    failed = 'failed'


class GenericScan(BaseModel):
    profile_id: UUID = Field(..., description='Profile ID')
    report_template_id: Optional[UUID] = Field(None, description='')
    schedule: Schedule
    max_scan_time: Optional[int] = None
    incremental: Optional[bool] = False
    next_run: Optional[date] = Field(None, description='Next scheduled Scan date')


class Scan(BaseModel):
    target_id: UUID = Field(..., description="Scan target's ID")
    profile_id: UUID = Field(
        ...,
        description='\nScanning profile (e.g. "Crawl Only", "Full Scan") ID.\n\n**Note:** Custom scanning profiles may have randomized IDs\n\n----\nList of **built-in** scanning profiles:\n- Full Scan: 11111111-1111-1111-1111-111111111111\n- Critical / High Risk Vulnerabilities: 11111111-1111-1111-1111-111111111112\n- Cross-site Scripting Vulnerabilities: 11111111-1111-1111-1111-111111111116\n- SQL Injection Vulnerabilities: 11111111-1111-1111-1111-111111111113\n- Weak Passwords: 11111111-1111-1111-1111-111111111115\n- Crawl Only: 11111111-1111-1111-1111-111111111117\n',
    )
    report_template_id: Optional[UUID] = Field(
        None,
        description='Report Template (e.g. "Developer Report", "OWASP Top 10 2017") ID\n\n----\n\nList of **built-in** report templates and their IDs:\n- Developer: 11111111-1111-1111-1111-111111111111\n- Quick: 11111111-1111-1111-1111-111111111112\n- Executive Summary: 11111111-1111-1111-1111-111111111113\n- HIPAA: 11111111-1111-1111-1111-111111111114\n- Affected Items: 11111111-1111-1111-1111-111111111115\n- Scan Comparison: 11111111-1111-1111-1111-111111111124\n- CWE 2011: 11111111-1111-1111-1111-111111111116\n- ISO 27001: 11111111-1111-1111-1111-111111111117\n- NIST SP800 53: 11111111-1111-1111-1111-111111111118\n- OWASP Top 10 2013: 11111111-1111-1111-1111-111111111119\n- OWASP Top 10 2017: 11111111-1111-1111-1111-111111111125\n- PCI DSS 3.2: 11111111-1111-1111-1111-111111111120\n- Sarbanes Oxley: 11111111-1111-1111-1111-111111111121\n- STIG DISA: 11111111-1111-1111-1111-111111111122\n- WASC Threat Classification: 11111111-1111-1111-1111-111111111123\n',
    )
    schedule: Schedule
    max_scan_time: Optional[int] = None
    incremental: Optional[bool] = False
    next_run: Optional[date] = Field(None, description='Next scheduled Scan date')


class ContinuousScanItemResponse(BaseModel):
    start_date: Optional[date] = None
    end_date: Optional[date] = None
    scan_type: Optional[str] = None
    status: Optional[str] = None


class ContinuousScanListResponse(BaseModel):
    scans: Optional[List[ContinuousScanItemResponse]] = None
    pagination: Optional[PaginationExt] = None


class OperationStats(BaseModel):
    operation_name: Optional[constr(max_length=1024)] = None
    number_of_runs: Optional[int] = None
    total_duration: Optional[int] = None
    average_duration: Optional[int] = None


class LocationStats(BaseModel):
    location_name: Optional[constr(max_length=1024)] = None
    number_of_requests: Optional[int] = None
    total_duration: Optional[int] = None
    average_duration: Optional[int] = None


class WebScanStatus(BaseModel):
    avg_response_time: Optional[int] = None
    locations: Optional[int] = None
    max_response_time: Optional[int] = None
    request_count: Optional[int] = None


class TargetInfo1(BaseModel):
    os: Optional[str] = None
    responsive: Optional[bool] = None
    server: Optional[str] = None
    technologies: Optional[List[str]] = None
    web_scan_status: Optional[WebScanStatus] = None


class HostStatistics(BaseModel):
    host: Optional[str] = None
    aborted: Optional[str] = None
    aborted_reason: Optional[str] = None
    external_hosts: Optional[List[str]] = None
    is_starting_host: Optional[bool] = None
    sensor_detected: Optional[bool] = None
    target_info: Optional[TargetInfo1] = None


class TargetInfo2(BaseModel):
    host: Optional[str] = None
    target_id: Optional[str] = None


class Message(BaseModel):
    kind: Optional[str] = None
    data: Optional[str] = None
    time: Optional[str] = None
    level: Optional[str] = None
    target_info: Optional[TargetInfo2] = None


class StatusStatistics(BaseModel):
    operationStatsByRun: Optional[List[OperationStats]] = Field(None, max_items=20)
    operationStatsByTotalDuration: Optional[List[OperationStats]] = Field(
        None, max_items=20
    )
    locationStatsByRequest: Optional[List[LocationStats]] = Field(None, max_items=20)
    locationStatsByAvgDuration: Optional[List[LocationStats]] = Field(
        None, max_items=20
    )
    locationStatsByTotalDuration: Optional[List[LocationStats]] = Field(
        None, max_items=20
    )


class Vuln(BaseModel):
    name: Optional[str] = None
    time: Optional[str] = None
    vuln_id: Optional[str] = None
    severity: Optional[int] = None
    target_info: Optional[TargetInfo2] = None


class Main(BaseModel):
    start_date: Optional[str] = None
    duration: Optional[int] = None
    status: Optional[str] = None
    progress: Optional[int] = None
    messages: Optional[List[Message]] = None
    status_statistics: Optional[StatusStatistics] = None
    vulns: Optional[List[Vuln]] = None
    web_scan_status: Optional[WebScanStatus] = None


class ScanningAppStatistics(BaseModel):
    abort_requested: Optional[bool] = None
    start_date: Optional[str] = None
    end_date: Optional[str] = None
    end_deadline: Optional[str] = None
    event_level: Optional[int] = None
    main: Optional[Main] = None
    hosts: Optional[Dict[str, HostStatistics]] = None
    build: Optional[str] = None


class Status1(Enum):
    scheduled = 'scheduled'
    queued = 'queued'
    starting = 'starting'
    processing = 'processing'
    completed = 'completed'
    aborting = 'aborting'
    aborted = 'aborted'
    failed = 'failed'
    pausing = 'pausing'
    paused = 'paused'
    resuming = 'resuming'


class ScanningApp(BaseModel):
    wvs: Optional[ScanningAppStatistics] = None
    ovas: Optional[ScanningAppStatistics] = None


class VulnerabilityType(BaseModel):
    vt_id: Optional[UUID] = Field(
        None, description='Vulnerability Type unique identifier'
    )
    name: Optional[str] = Field(None, description='Vulnerability Type name')
    severity: Optional[int] = Field(None, description='Vulnerability Type severity')
    tags: Optional[List[str]] = Field(None, description='Vulnerability Type tags')
    cvss2: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v2.0 vector string'
    )
    cvss3: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v3.0 vector string'
    )
    cvss4: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v4.0 vector string'
    )
    app: Optional[str] = Field(None, description='Scanner identifier')


class VulnerabilityGroupItem(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    data: Optional[Dict[str, Any]] = None
    count: Optional[int] = None
    last_seen: Optional[str] = None


class VulnerabilityTypeTargetsCountResponseItem(VulnerabilityType):
    count: Optional[int] = None
    criticality: Optional[int] = Field(
        None, description='Vulnerability Type criticality score'
    )


class VulnerabilityTypeSessionsCountResponseItem(VulnerabilityType):
    count: Optional[int] = None


class Status2(Enum):
    fixed = 'fixed'
    ignored = 'ignored'
    open = 'open'
    false_positive = 'false_positive'


class VulnerabilityStatus(BaseModel):
    status: Status2 = Field(
        ..., description='Vulnerability Status (Fixed, Ignored, Open, False Positive)'
    )
    comment: Optional[constr(max_length=256)] = None


class Highlight(BaseModel):
    index: Optional[int] = None
    length: Optional[int] = None
    in_: Optional[constr(max_length=16)] = Field(None, alias='in')


class Link(BaseModel):
    rel: constr(max_length=256) = Field(..., description='Name or type of relation')
    href: constr(max_length=256) = Field(..., description='Location of related item')


class SeverityCounts(BaseModel):
    critical: Optional[int] = Field(
        None, description='Critical-severity Vulnerability count'
    )
    high: Optional[int] = Field(None, description='High-severity Vulnerability count')
    medium: Optional[int] = Field(
        None, description='Medium-severity Vulnerability count'
    )
    low: Optional[int] = Field(None, description='Low-severity Vulnerability count')
    info: Optional[int] = Field(None, description='Informational Alert count')


class TechnologyVersion(BaseModel):
    start: Optional[constr(max_length=256)] = None
    end: Optional[constr(max_length=256)] = None
    cvss_score: Optional[float] = None


class UpgradeVersion(BaseModel):
    version: Optional[constr(max_length=256)] = None
    cvss_score: Optional[float] = None


class Technology(BaseModel):
    tech_id: Optional[str] = None
    name: Optional[constr(max_length=256)] = None
    description: Optional[constr(max_length=65535)] = None
    type: Optional[constr(max_length=256)] = None
    link: Optional[constr(max_length=256)] = None
    outdated: Optional[bool] = None
    loc_id: Optional[int] = None
    loc_url: Optional[str] = None
    detected_version: Optional[TechnologyVersion] = None
    branch_upgrade: Optional[UpgradeVersion] = None
    upgrade: Optional[UpgradeVersion] = None


class TechnologiesListResponse(BaseModel):
    technologies: Optional[List[Technology]] = Field(
        None, description='List of technologies'
    )
    pagination: Optional[PaginationExt] = None


class UserCredentials(BaseModel):
    enabled: Optional[bool] = Field(False, description='User account is enabled')
    username: Optional[constr(max_length=128)] = Field(
        None, description='User account username'
    )
    password: Optional[constr(max_length=128)] = Field(
        None, description='User account password hash'
    )
    url: Optional[constr(max_length=256)] = Field(None, description='URL')


class Kind(Enum):
    none = 'none'
    automatic = 'automatic'
    sequence = 'sequence'
    oauth = 'oauth'


class SiteLogin(BaseModel):
    kind: Kind = Field(
        ..., description='Form Authentication method (None, Automatic, Sequence)'
    )
    credentials: Optional[UserCredentials] = None


class CustomCookies(BaseModel):
    cookie: Optional[constr(max_length=4096)] = Field(
        None, description='Custom Cookies value'
    )
    url: Optional[constr(max_length=256)] = Field(
        None, description='Custom Cookies URL'
    )


class TargetGroup(BaseModel):
    group_id: Optional[UUID] = Field(None, description='Target Group unique identifier')
    name: constr(max_length=256) = Field(..., description='Target Group name')
    target_count: Optional[int] = Field(None, description='Target Group Target count')
    description: Optional[constr(max_length=512)] = None
    vuln_count: Optional[SeverityCounts] = None


class Kind1(Enum):
    cookie = 'cookie'
    http_basic = 'http_basic'
    ntlm = 'ntlm'
    http_basic_token = 'http_basic_token'
    oauth = 'oauth'
    impersonation_http_basic_token = 'impersonation_http_basic_token'


class IssueTrackerAuth(BaseModel):
    kind: Kind1 = Field(..., description='Issue Tracker authentication method')
    user: Optional[constr(max_length=128)] = Field(
        None, description='Issue Tracker Username'
    )
    password: Optional[constr(max_length=256)] = Field(
        None, description='Issue Tracker Password'
    )
    consumer_key: Optional[constr(max_length=256)] = None
    private_key: Optional[constr(max_length=5120)] = None


class IssueTrackerCollection(BaseModel):
    collection_name: Optional[constr(max_length=128)] = Field(
        None, description='The name of the collection'
    )


class IssueTrackerCustomField(BaseModel):
    custom_field_name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the custom field'
    )
    custom_field_id: Optional[constr(max_length=256)] = Field(
        None, description='The id of the custom field'
    )


class IssueTrackerProject(BaseModel):
    project_id: Optional[constr(max_length=128)] = Field(
        None, description='The id of the project'
    )
    project_name: Optional[constr(max_length=128)] = Field(
        None, description='The name of the project'
    )
    project_key: Optional[constr(max_length=128)] = Field(
        None, description='The key of the project'
    )


class IssueTrackerIssueType(BaseModel):
    issue_id: Optional[constr(max_length=128)] = Field(
        None, description='The id of the issue type'
    )
    issue_name: Optional[constr(max_length=128)] = Field(
        None, description='The name of the issue type'
    )


class Platform(Enum):
    github = 'github'
    jira = 'jira'
    tfs = 'tfs'
    gitlab = 'gitlab'
    bugzilla = 'bugzilla'
    mantis = 'mantis'
    azureservice = 'azureservice'


class ProxyType(Enum):
    system = 'system'
    no_proxy = 'no_proxy'
    custom = 'custom'


class CustomField(BaseModel):
    id: Optional[str] = None
    value: str
    name: Optional[str] = None


class IssueTrackerConnectionStatus(BaseModel):
    success: Optional[bool] = Field(None, description='Issue Tracker status')
    message: Optional[str] = Field(None, description='Issue Tracker message')


class IssueTrackerProjects(BaseModel):
    projects: Optional[List[str]] = Field(None, description='Issue Tracker projects')


class IssueTrackerIssueTypes(BaseModel):
    issue_types: Optional[List[str]] = None


class ScanSpeed(Enum):
    fast = 'fast'
    moderate = 'moderate'
    slow = 'slow'
    sequential = 'sequential'
    slower = 'slower'


class CaseSensitive(Enum):
    yes = 'yes'
    no = 'no'
    auto = 'auto'


class Technology1(Enum):
    ASP = 'ASP'
    ASP_NET = 'ASP.NET'
    PHP = 'PHP'
    Perl = 'Perl'
    Java_J2EE = 'Java/J2EE'
    ColdFusion_Jrun = 'ColdFusion/Jrun'
    Python = 'Python'
    Rails = 'Rails'
    FrontPage = 'FrontPage'
    Node_js = 'Node.js'


class ExcludedPath(BaseModel):
    __root__: constr(max_length=512)


class ListType(Enum):
    all_vulnerabilities = 'all_vulnerabilities'
    targets = 'targets'
    groups = 'groups'
    scans = 'scans'
    scan_result = 'scan_result'
    vulnerabilities = 'vulnerabilities'
    scan_vulnerabilities = 'scan_vulnerabilities'
    scan_pair = 'scan_pair'
    scan_result_pair = 'scan_result_pair'


class IdListItem(BaseModel):
    __root__: constr(max_length=36)


class ReportSource(BaseModel):
    description: Optional[constr(max_length=256)] = None
    list_type: ListType
    id_list: Optional[List[IdListItem]] = Field(None, max_items=500)


class ExportSource(BaseModel):
    list_type: ListType
    id_list: Optional[List[IdListItem]] = Field(None, max_items=500)
    waf_id: Optional[UUID] = None
    waf_name: Optional[str] = None


class AcceptedSource1(Enum):
    all_vulnerabilities = 'all_vulnerabilities'
    targets = 'targets'
    groups = 'groups'
    scans = 'scans'
    scan_result = 'scan_result'
    vulnerabilities = 'vulnerabilities'
    scan_vulnerabilities = 'scan_vulnerabilities'
    scan_pair = 'scan_pair'
    scan_result_pair = 'scan_result_pair'


class ExportType(BaseModel):
    name: Optional[str] = None
    id: Optional[UUID] = None
    content_type: Optional[str] = None
    accepted_sources: Optional[List[AcceptedSource1]] = None
    export_id: UUID
    upload: Optional[bool] = None


class ExportTypesList(BaseModel):
    templates: Optional[List[ExportType]] = None


class ExcludedPathList(BaseModel):
    excluded_paths: Optional[List[ExcludedPath]] = Field(
        None, description='Paths excluded from the Scan scope', max_items=512
    )


class NewExport(BaseModel):
    export_id: UUID
    source: ExportSource


class NewReport(BaseModel):
    template_id: UUID
    source: ReportSource


class LocType(Enum):
    file = 'file'
    folder = 'folder'


class CrawlLocation(BaseModel):
    loc_id: Optional[int] = Field(None, description='Crawl location unique identifier')
    name: Optional[str] = Field(None, description='Crawl location name')
    path: Optional[str] = Field(None, description='Crawl location path')
    loc_type: Optional[LocType] = Field(
        None, description='Crawl location type (File, Folder)'
    )
    source_id: Optional[int] = Field(
        None, description='Crawl location source unique identifier'
    )
    parent_id: Optional[int] = None
    tags: Optional[str] = None
    fragments: Optional[str] = None
    excluded: Optional[bool] = None


class CrawlLocationDetails(BaseModel):
    loc_id: Optional[int] = Field(None, description='Crawl location unique identifier')
    parent_id: Optional[int] = None
    source_id: Optional[int] = None
    url: Optional[str] = Field(None, description='Crawl location URL')
    severity_counts: Optional[SeverityCounts] = None
    threat: Optional[int] = None


class ChildUserIdList(BaseModel):
    user_id_list: List[UUID]


class FileUploadDescriptor(BaseModel):
    name: Optional[constr(max_length=128)] = Field(None, description='File name')
    size: Optional[int] = Field(None, description='File size in bytes')


class UploadedFile(BaseModel):
    upload_id: Optional[UUID] = Field(
        None, description='Uploaded file unique identifier'
    )
    name: Optional[str] = Field(None, description='Uploaded file name')
    size: Optional[int] = Field(None, description='Uploaded file size')
    status: Optional[bool] = Field(None, description='Uploaded file status')
    current_size: Optional[int] = Field(None, description='Uploaded file current size')
    retrieve_url: Optional[str] = None


class ErrorDescriptionResponse(BaseModel):
    code: int
    reason: str = Field(..., description='Localized error message')
    details: Optional[List[str]] = None


class UploadLocationResponse(BaseModel):
    upload_url: Optional[str] = None


class UploadedFilesResponse(BaseModel):
    files: Optional[List[UploadedFile]] = None


class ReportIdList(BaseModel):
    report_id_list: List[UUID]


class TargetIdContainer(BaseModel):
    target_id: Optional[UUID] = None


class GroupChangeTargetIdList(BaseModel):
    remove: Optional[List[UUID]] = Field(
        None, description='Remove Targets from Target Group'
    )
    add: Optional[List[UUID]] = Field(None, description='Add Targets to Target Group')


class TargetIdList(BaseModel):
    target_id_list: Optional[List[UUID]] = Field(
        None, description='Target unique identifiers'
    )


class TargetGroupIdList(BaseModel):
    group_id_list: Optional[List[UUID]] = Field(
        None, description='Group unique identifiers'
    )


class UserAccess(BaseModel):
    access_all_groups: bool = Field(..., description='User has access to all Groups')
    group_id_list: List[UUID] = Field(..., description='Groups accessible by a User')


class Report(BaseModel):
    report_id: Optional[UUID] = Field(None, description='Report unique identifier')
    source: Optional[ReportSource] = None
    template_id: Optional[UUID] = Field(
        None, description='Report template unique identifier'
    )
    template_name: Optional[str] = Field(None, description='Report template name')
    template_type: Optional[int] = Field(None, description='Report template type')
    generation_date: Optional[datetime] = Field(
        None, description='Report generation date'
    )
    status: Optional[str] = Field(None, description='Report status')
    download: Optional[List[str]] = Field(None, description='Report download URI')


class Export(BaseModel):
    report_id: Optional[UUID] = None
    source: Optional[ExportSource] = None
    template_id: Optional[UUID] = None
    template_name: Optional[str] = None
    template_type: Optional[int] = None
    generation_date: Optional[datetime] = None
    status: Optional[str] = None
    download: Optional[List[str]] = None


class ReportTemplateList(BaseModel):
    templates: Optional[List[ReportTemplate]] = None


class ReportListResponse(BaseModel):
    reports: List[Report]
    pagination: PaginationExt


class ScanningProfilesResponse(BaseModel):
    scanning_profiles: Optional[List[ScanningProfile]] = None


class CrawlLocationListResponse(BaseModel):
    locations: List[CrawlLocation]
    pagination: Optional[PaginationExt] = None


class Kind2(Enum):
    none = 'none'
    key = 'key'
    password = 'password'


class SSHCredentials(BaseModel):
    kind: Optional[Kind2] = Field(None, description='SSH authentication method')
    username: Optional[constr(max_length=128)] = Field(
        None, description='SSH host username'
    )
    port: Optional[int] = Field(22, description='SSH host port')
    password: Optional[constr(max_length=128)] = Field(
        None, description='SSH host password'
    )
    ssh_key: Optional[str] = Field(None, description='SSH key')
    key_password: Optional[constr(max_length=128)] = Field(
        None, description='SSH key passphrase'
    )


class ScanResultItem(BaseModel):
    scan_id: Optional[UUID] = Field(None, description='Scan unique identifier')
    result_id: Optional[UUID] = Field(None, description='Result unique identifier')
    start_date: Optional[datetime] = Field(None, description='Scan start-date')
    end_date: Optional[datetime] = Field(None, description='Scan end-date')
    status: Optional[str] = Field(None, description='Scan status')


class AllowedHost(BaseModel):
    target_id: Optional[UUID] = Field(None, description='Target unique identifier')
    address: constr(max_length=1024) = Field(..., description='Target URL or hostname')
    description: Optional[constr(max_length=1024)] = Field(
        '', description='Target description'
    )


class AllowedHosts(BaseModel):
    hosts: Optional[List[AllowedHost]] = None


class Protocol(Enum):
    http = 'http'


class ProxySettings(BaseModel):
    protocol: Optional[Protocol] = Field(None, description='Proxy protocol')
    address: Optional[constr(max_length=256)] = Field(None, description='Proxy address')
    port: Optional[int] = Field(None, description='Proxy port')
    username: Optional[constr(max_length=64)] = Field(
        None, description='Proxy username'
    )
    password: Optional[constr(max_length=64)] = Field(
        None, description='Proxy password'
    )
    enabled: Optional[bool] = Field(False, description='Proxy enabled')


class ContinuousScanMode(BaseModel):
    enabled: bool


class SensorSecretContainer(BaseModel):
    secret: Optional[str] = None


class SsoType(Enum):
    saml = 'saml'
    oidc = 'oidc'


class SsoProvider(Enum):
    Okta = 'Okta'
    Google = 'Google'
    AzureAD = 'AzureAD'
    ADFS = 'ADFS'


class SSOSettings(BaseModel):
    enabled: bool
    sso_type: Optional[SsoType] = None
    sso_provider: Optional[SsoProvider] = None
    auto_provision_enabled: Optional[bool] = False
    is_encrypt_assertion: Optional[bool] = False
    x509_certificate: Optional[str] = None
    is_alternate_login_email: Optional[bool] = False
    is_enforced: Optional[bool] = False
    saml2_endpoint: Optional[constr(max_length=512)] = None
    idp_identifier: Optional[constr(max_length=512)] = None
    saml2_service_url: Optional[constr(max_length=512)] = None
    identifier: Optional[constr(max_length=512)] = None
    private_key: Optional[str] = None
    private_key_password: Optional[str] = None
    private_key_file_name: Optional[str] = None
    private_key_detail: Optional[str] = None
    assertion_certificate: Optional[str] = None
    assertion_certificate_detail: Optional[str] = None
    assertion_signed: Optional[bool] = False
    auth_signed: Optional[bool] = False


class ManualInterventionItem(BaseModel):
    target_id: Optional[str] = None
    scan_id: Optional[str] = None
    scan_session_id: Optional[str] = None
    scanning_app: Optional[str] = None
    data: Optional[str] = None
    index: Optional[int] = None
    old: Optional[float] = None
    target_desc: Optional[List[str]] = Field(
        None, description='Target info (address, description)'
    )


class ExcludedHoursProfile(BaseModel):
    name: constr(min_length=1, max_length=256)
    excluded_hours_id: Optional[UUID] = None
    time_offset: Optional[conint(ge=-720, le=840)] = Field(
        None, description='Time offset in minutes'
    )
    exclusion_matrix: List[bool] = Field(
        ...,
        description='Exclusion matrix 7d * 24h, true = exclude, false = ignore',
        max_items=168,
        min_items=168,
    )


class ExcludedHoursProfilesList(BaseModel):
    values: Optional[List[ExcludedHoursProfile]] = None


class VulnerabilityRecheck(BaseModel):
    ui_session_id: Optional[str] = Field(None, description='For internal use only')


class VulnerabilitiesRecheck(BaseModel):
    vuln_id_list: Optional[List[constr(max_length=64)]] = None
    ui_session_id: Optional[str] = Field(None, description='For internal use only')


class TargetConfigStatusSensor(BaseModel):
    version: Optional[str] = None
    found: Optional[bool] = None


class TargetConfigStatusAuthenticationMissing(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusCertificateMissing(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusLoginMissing(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusAuthenticationError(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusLoginSequence(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusAutoLogin(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusScopeChanged(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusImporterFailed(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusNonResponsive(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusSensorDetected(BaseModel):
    url: Optional[str] = None


class TargetConfigStatusImporterOutOfScope(BaseModel):
    url: Optional[str] = None


class TaskIdObject(BaseModel):
    task_id: Optional[str] = None


class WorkerIdList(BaseModel):
    worker_id_list: Optional[List[UUID]] = None


class WorkerDescription(BaseModel):
    description: Optional[constr(min_length=1, max_length=256)] = None


class ScanningApp1(Enum):
    wvs = 'wvs'
    ovas = 'ovas'


class Status3(Enum):
    offline = 'offline'
    online = 'online'


class Authorization(Enum):
    pending = 'pending'
    authorized = 'authorized'
    rejected = 'rejected'
    detached = 'detached'


class Worker(BaseModel):
    scanning_app: ScanningApp1
    endpoint: str
    description: Optional[str] = None
    worker_id: Optional[UUID] = None
    status: Optional[Status3] = None
    authorization: Optional[Authorization] = None
    app_version: Optional[str] = None
    license_status: Optional[str] = None
    targets: Optional[List[UUID]] = None
    notification_status: Optional[bool] = None


class TargetDeletionNotification(BaseModel):
    target_deletion_allowance: Optional[int] = None
    target_deletion_consumed: Optional[bool] = None


class FQDNEntry(BaseModel):
    fqdn: Optional[str] = None
    fqdn_hash: Optional[str] = None
    tm_type: Optional[str] = None
    last_scanned: Optional[str] = None
    deleted: Optional[str] = None
    local_target_count: Optional[int] = None
    local: Optional[bool] = None
    status: Optional[str] = None
    added: Optional[str] = None
    updated: Optional[str] = None


class FQDNList(BaseModel):
    fqdns: Optional[List[FQDNEntry]] = None
    pagination: Optional[PaginationExt] = None


class EmptyObject(BaseModel):
    pass


class RenderableMessage(BaseModel):
    template: Optional[str] = None
    data: Optional[str] = None
    template_id: Optional[str] = None


class WAFConnectionStatus(BaseModel):
    success: Optional[bool] = Field(None, description='WAF status')
    message: Optional[str] = Field(None, description='WAF message')


class Platform1(Enum):
    AWS = 'AWS'


class Scope(Enum):
    CLOUDFRONT = 'CLOUDFRONT'
    REGIONAL = 'REGIONAL'


class Region(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    ca_central_1 = 'ca-central-1'
    eu_north_1 = 'eu-north-1'
    eu_west_3 = 'eu-west-3'
    eu_west_2 = 'eu-west-2'
    eu_west_1 = 'eu-west-1'
    eu_central_1 = 'eu-central-1'
    ap_south_1 = 'ap-south-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    sa_east_1 = 'sa-east-1'


class Proxy1(BaseModel):
    proxy_type: Optional[ProxyType] = None
    settings: Optional[ProxySettings] = None


class WAFConfig(BaseModel):
    platform: Optional[Platform1] = Field(None, description='WAF platform type')
    acl_name: constr(max_length=128) = Field(
        ..., description='Web ACL name obtained from aws web portal'
    )
    access_key_id: constr(max_length=128) = Field(..., description='AWS Access Key Id')
    secret_key: constr(max_length=128) = Field(..., description='AWS secret access key')
    scope: Scope = Field(..., description='Scope of the web ACL')
    region: Optional[Region] = Field(
        None, description='Region of the web ACL (If cloudfront default to us-east-1)'
    )
    acl_id: constr(max_length=128) = Field(
        ..., description='Web ACL id obtained from aws web portal'
    )
    proxy: Optional[Proxy1] = None


class PermissionDetailEntry(BaseModel):
    category: Optional[constr(max_length=128)] = None
    name: Optional[constr(max_length=128)] = None
    description: Optional[constr(max_length=256)] = None


class RoleStats(BaseModel):
    user_count: Optional[int] = None
    group_count: Optional[int] = None
    all_user_count: Optional[int] = None


class Permission(BaseModel):
    __root__: constr(max_length=128)


class RoleDetails(BaseModel):
    role_id: Optional[UUID] = None
    name: Optional[constr(max_length=128)] = None
    description: Optional[constr(max_length=256)] = None
    created_at: Optional[date] = None
    owner_id: Optional[UUID] = None
    creator_id: Optional[UUID] = None
    permissions: Optional[List[Permission]] = Field(None, max_items=100)
    stats: Optional[RoleStats] = None


class Role(BaseModel):
    name: constr(max_length=128)
    description: constr(max_length=256)
    permissions: List[constr(max_length=128)]


class RoleMapping(BaseModel):
    role_mapping_id: Optional[UUID] = Field(None, description='Role Mapping Id')
    role_id: UUID = Field(..., description='Role assigned to a User')
    access_all_targets: Optional[bool] = Field(
        False, description='User has access to all Targets'
    )
    target_group_ids: Optional[List[UUID]] = Field(
        None, description='Target Groups available to a User'
    )


class RoleMappingList(BaseModel):
    role_mappings: List[RoleMapping]


class RoleMappingIdList(BaseModel):
    role_mapping_ids: List[UUID]


class UserGroupRoleMappings(BaseModel):
    user_group_id: UUID
    role_mappings: Optional[List[RoleMapping]] = None


class PermissionsList(BaseModel):
    permissions: Optional[List[PermissionDetailEntry]] = None


class UserGroupStats(BaseModel):
    user_count: Optional[int] = None


class UserGroup(BaseModel):
    name: constr(max_length=128)
    description: constr(max_length=256)
    role_mappings: Optional[List[RoleMapping]] = None
    user_ids: Optional[List[UUID]] = None


class UserToUserGroupDetails(BaseModel):
    user_ids: Optional[List[UUID]] = None
    user_group_id: Optional[UUID] = None


class PluginInstance(BaseModel):
    display_name: Optional[str] = None
    plugin_id: Optional[UUID] = None
    instance_id: Optional[UUID] = None
    created_on: Optional[date] = None


class TargetInfo(BaseModel):
    target_id: Optional[UUID] = Field(None, description='Target unique identifier')
    scan_authorization: Optional[ScanAuthorization] = None
    continuous_mode: Optional[bool] = Field(None, description='Continuous Mode enabled')
    last_scan_date: Optional[date] = Field(
        None, description='Last date the Target was scanned on'
    )
    last_scan_id: Optional[UUID] = Field(
        None, description='Last Scan unique identifier for the Target'
    )
    last_scan_session_id: Optional[UUID] = None
    last_scan_session_status: Optional[str] = None
    severity_counts: Optional[SeverityCounts] = None
    threat: Optional[int] = None
    links: Optional[List[Link]] = Field(
        None, description='Target quick-access links (last scan, report)'
    )
    manual_intervention: Optional[bool] = Field(
        None, description='Target requires manual intervention'
    )
    verification: Optional[str] = Field(
        None,
        description='The verification status of the target (none, auto, admin or demo)',
    )


class Target(BaseModel):
    address: constr(max_length=1024) = Field(..., description='Target URL or hostname')
    description: Optional[constr(max_length=1024)] = Field(
        '', description='Target description'
    )
    type: Optional[Type] = Field(
        'default', description='The type of the target (default, network or demo)'
    )
    criticality: Optional[int] = Field(
        None,
        description='Target criticality (Critical [30], High [20], Normal [10], Low [0])\n',
    )
    fqdn_status: Optional[str] = None
    fqdn_tm_hash: Optional[str] = None
    deleted_at: Optional[str] = None
    fqdn: Optional[str] = None
    fqdn_hash: Optional[str] = None
    default_scanning_profile_id: Optional[str] = None
    agents: Optional[List[TargetAgents]] = Field(None, max_items=500)


class AddTargetsDescriptor(BaseModel):
    targets: List[Target] = Field(..., max_items=500)
    groups: Optional[List[UUID]] = Field(None, max_items=25, unique_items=True)


class TargetItemResponseList(BaseModel):
    targets: Optional[List[Target]] = None


class TargetItemResponse(Target, TargetInfo):
    pass


class ScanInfo(BaseModel):
    status: Optional[Status] = Field(
        None,
        description='Scan status (Scheduled, Processing, Aborted, Completed, Failed)',
    )
    event_level: Optional[int] = None
    severity_counts: Optional[SeverityCounts] = None
    progress: Optional[conint(ge=0, le=100)] = Field(
        None, description='Percentage of Scan progress complete'
    )
    start_date: Optional[date] = Field(None, description='Scan start date')
    threat: Optional[int] = None
    scan_session_id: Optional[UUID] = None
    acusensor: Optional[bool] = None


class ScanSessionStatus(BaseModel):
    current_session: Optional[ScanInfo] = None
    previous_session: Optional[ScanInfo] = None


class ScanItemResponse(Scan, ScanSessionStatus):
    target: Optional[Target] = None
    criticality: Optional[int] = None
    profile_name: Optional[str] = Field(None, description='Scanning Profile name')
    scan_id: Optional[UUID] = Field(None, description='Scan unique identifier')
    start_date: Optional[datetime] = Field(None, description='Scan start date')
    manual_intervention: Optional[bool] = Field(
        None, description='Scan has manual intervention'
    )


class ScanListResponse(BaseModel):
    scans: Optional[List[ScanItemResponse]] = None
    pagination: Optional[PaginationExt] = None


class ScanStatistics(BaseModel):
    status: Optional[Status1] = None
    severity_counts: Optional[SeverityCounts] = None
    scanning_app: Optional[ScanningApp] = None


class VulnerabilityTypeDetails(BaseModel):
    description: Optional[str] = Field(
        None, description='Vulnerability Type description'
    )
    cvss2: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v2.0 vector string'
    )
    cvss3: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v3.0 vector string'
    )
    cvss4: Optional[str] = Field(
        None, description='Vulnerability Type CVSS v4.0 vector string'
    )
    cvss_score: Optional[float] = Field(
        None,
        description='Score is based on the highest CVSS version known for the vulnerability from 2.0 to 3.1',
    )
    cvss4_score: Optional[float] = Field(None, description='CVSS 4.0 score')
    impact: Optional[str] = Field(
        None, description='Vulnerability Type security impact'
    )
    recommendation: Optional[str] = Field(
        None, description='Vulnerability Type remediation recommendation'
    )
    long_description: Optional[str] = Field(
        None, description='Vulnerability Type long description'
    )
    references: Optional[List[Link]] = Field(
        None, description='Vulnerability Type references and resources'
    )


class VulnerabilityGroupsResponse(BaseModel):
    items: Optional[List[VulnerabilityGroupItem]] = None


class VulnerabilityTypeTargetsCountResponse(BaseModel):
    vulnerability_types: Optional[List[VulnerabilityTypeTargetsCountResponseItem]] = (
        None
    )
    pagination: Optional[PaginationExt] = None


class VulnerabilityTypeSessionsCountResponse(BaseModel):
    vulnerability_types: Optional[List[VulnerabilityTypeSessionsCountResponseItem]] = (
        Field(None, description='Count of Vulnerability Types found')
    )
    pagination: Optional[PaginationExt] = None


class Vulnerability(VulnerabilityStatus):
    target_description: Optional[str] = Field(
        None, description='The affected target description'
    )
    vuln_id: Optional[str] = Field(None, description='Vulnerability unique identifier')
    target_vuln_id: Optional[str] = Field(
        None,
        description='Target vulnerability unique identifier (for scan session vuln view only)',
    )
    issue_id: Optional[str] = None
    issue_tracker_id: Optional[str] = None
    issue_url: Optional[str] = Field(
        None,
        description='Link to the vulnerability created in the configured issue tracker',
    )
    vt_name: Optional[str] = Field(None, description='Vulnerability Type name')
    criticality: Optional[int] = Field(None, description='Vulnerability criticality')
    vt_id: Optional[UUID] = Field(
        None, description='Vulnerability Type unique identifier'
    )
    affects_detail: Optional[str] = Field(None, description='Vulnerability input')
    affects_url: Optional[str] = Field(None, description='Vulnerability URL')
    source: Optional[str] = Field(None, description='Who detected the vulnerability')
    loc_id: Optional[int] = None
    target_id: Optional[UUID] = Field(None, description='Target unique identifier')
    first_seen: Optional[date] = Field(
        None, description='Date Vulnerability was first found'
    )
    last_seen: Optional[date] = Field(
        None, description='Date Vulnerability was last found'
    )
    severity: Optional[int] = Field(None, description='Vulnerability Type severity')
    tags: Optional[List[str]] = Field(None, description='Vulnerability Type tags')
    continuous: Optional[bool] = Field(None, description='Continuous Scan')
    confidence: Optional[int] = None
    vt_created: Optional[str] = Field(None, description='')
    vt_updated: Optional[str] = Field(None, description='')
    app: Optional[str] = None
    archived: Optional[bool] = None


class VulnerabilityDetails(Vulnerability, VulnerabilityTypeDetails):
    details: Optional[str] = Field(
        None,
        description='Details dictionary used for obtaining a description on how the alert was found\n',
    )
    request: Optional[bytes] = None
    response_info: Optional[str] = None
    highlights: Optional[List[Highlight]] = None


class VulnerabilityListResponse(BaseModel):
    vulnerabilities: List[Vulnerability] = Field(
        ..., description='Vulnerabilities list'
    )
    pagination: Optional[PaginationExt] = None


class TargetGroupsListResponse(BaseModel):
    groups: Optional[List[TargetGroup]] = None
    pagination: Optional[PaginationExt] = None


class IssueTrackerCollections(BaseModel):
    collections: Optional[List[IssueTrackerCollection]] = None


class IssueTrackerCustomFields(BaseModel):
    custom_fields: Optional[List[IssueTrackerCustomField]] = Field(None, max_items=50)


class Proxy(BaseModel):
    proxy_type: Optional[ProxyType] = None
    settings: Optional[ProxySettings] = None


class IssueTrackerConfig(BaseModel):
    platform: Platform = Field(..., description='Issue Tracker Type')
    url: constr(max_length=128) = Field(..., description='Issue Tracker URL')
    collection: Optional[IssueTrackerCollection] = None
    project: Optional[IssueTrackerProject] = None
    issue_type: Optional[IssueTrackerIssueType] = None
    auth: IssueTrackerAuth
    proxy: Optional[Proxy] = None
    access_from_any_groups: Optional[bool] = None
    groups_access: Optional[List[UUID]] = None
    tags: Optional[List[str]] = Field(None, max_items=20)
    labels: Optional[List[str]] = Field(None, max_items=20)
    custom_fields: Optional[List[CustomField]] = Field(None, max_items=20)


class IssueTrackerEntry(IssueTrackerConfig):
    issue_tracker_id: Optional[UUID] = None
    name: Optional[constr(max_length=128)] = None


class IssueTrackerList(BaseModel):
    issue_trackers: Optional[List[IssueTrackerEntry]] = None


class TargetConfiguration(BaseModel):
    issue_tracker_id: Optional[str] = None
    plugin_instance_id: Optional[str] = None
    limit_crawler_scope: Optional[bool] = Field(
        None, description='Limit crawling to Target URI and sub-directories only'
    )
    login: Optional[SiteLogin] = None
    sensor: Optional[bool] = Field(None, description='AcuSensor configured')
    sensor_secret: Optional[str] = Field(None, description='AcuSensor secret')
    ssh_credentials: Optional[SSHCredentials] = None
    proxy: Optional[ProxySettings] = None
    authentication: Optional[UserCredentials] = None
    client_certificate_password: Optional[constr(max_length=128)] = Field(
        None, description='Client Certificate password'
    )
    client_certificate_url: Optional[constr(max_length=256)] = Field(
        None, description='Client Certificate URL'
    )
    scan_speed: Optional[ScanSpeed] = Field(
        None, description='HTTP request send rate (Fast, Moderate, Slow, Sequential)'
    )
    case_sensitive: Optional[CaseSensitive] = Field(
        None, description='Case-sensitive crawling'
    )
    technologies: Optional[List[Technology1]] = Field(
        None, description='Technologies enumerated'
    )
    custom_headers: Optional[List[str]] = Field(
        None, description='Custom HTTP headers set', max_items=20
    )
    custom_cookies: Optional[List[CustomCookies]] = Field(
        None, description='Custom cookies set', max_items=10, unique_items=True
    )
    excluded_paths: Optional[List[ExcludedPath]] = Field(
        None, description='Paths excluded from the Scan scope', max_items=100
    )
    user_agent: Optional[constr(max_length=256)] = Field(
        None, description='User-agent string set'
    )
    debug: Optional[bool] = Field(None, description='Debug mode')
    excluded_hours_id: Optional[str] = None
    ad_blocker: Optional[bool] = True
    restrict_scans_to_import_files: Optional[bool] = None
    default_scanning_profile_id: Optional[str] = None
    preseed_mode: Optional[str] = None
    skip_login_form: Optional[bool] = False


class ExcludedPathListUpdate(BaseModel):
    add: Optional[ExcludedPathList] = None
    delete: Optional[ExcludedPathList] = None


class ChildUser(BaseModel):
    user_id: Optional[UUID] = None
    password: Optional[str] = None
    email: EmailStr
    first_name: constr(max_length=64)
    last_name: constr(max_length=64)
    role_mappings: Optional[List[RoleMapping]] = None
    user_groups: Optional[List[UUID]] = None
    enabled: Optional[bool] = None
    totp_enabled: Optional[bool] = None
    locked: Optional[int] = None
    invite_id: Optional[UUID] = None
    invite_expired: Optional[bool] = None
    expiration_date: Optional[datetime] = None
    sso_exemption: Optional[bool] = None


class TargetListResponse(BaseModel):
    targets: List[TargetItemResponse]
    pagination: Optional[PaginationExt] = None


class ChildUserListResponse(BaseModel):
    users: List[ChildUser]
    pagination: Optional[PaginationExt] = None


class ScanResultListResponse(BaseModel):
    results: Optional[List[ScanResultItem]] = None
    pagination: Optional[PaginationExt] = None


class WorkerList(BaseModel):
    workers: Optional[List[Worker]] = None


class WorkerExtended(Worker):
    max_scans: Optional[int] = None
    current_scans: Optional[int] = None
    status_extra: Optional[Dict[str, Any]] = None


class WAFEntry(WAFConfig):
    waf_id: Optional[UUID] = None
    name: Optional[constr(max_length=128)] = None


class RolesList(BaseModel):
    roles: List[RoleDetails]
    pagination: Optional[PaginationExt] = None


class UserGroupDetails(BaseModel):
    user_group_id: Optional[UUID] = None
    name: Optional[constr(max_length=128)] = None
    description: Optional[constr(max_length=256)] = None
    created: Optional[date] = None
    owner_id: Optional[UUID] = None
    creator_id: Optional[UUID] = None
    user_ids: Optional[List[UUID]] = None
    role_mappings: Optional[List[RoleMapping]] = None
    stats: Optional[UserGroupStats] = None


class PluginInstances(BaseModel):
    instances: Optional[List[PluginInstance]] = None


class WAFsList(BaseModel):
    wafs: Optional[List[WAFEntry]] = None


class UserGroupsList(BaseModel):
    user_groups: List[UserGroupDetails]
    pagination: Optional[PaginationExt] = None
